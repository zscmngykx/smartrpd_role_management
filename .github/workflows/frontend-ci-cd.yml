name: Frontend CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  setup:
    name: Setup Node.js
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm install

  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        run: npm ci || npm install

      - name: Install ESLint deps
        run: npm i -D eslint@^9 @eslint/js@^9 || true

      # 避免控制台被解析成 annotations
      - name: Disable ESLint matchers
        run: |
          echo "::remove-matcher owner=eslint-compact::" || true
          echo "::remove-matcher owner=eslint-stylish::" || true

      # 运行并输出到文件；始终生成报告
      - name: Run ESLint to JSON
        env:
          REPORT_PATH: ${{ github.workspace }}/frontend/reports/eslint-report.json
        run: |
          mkdir -p "$(dirname "$REPORT_PATH")"
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json -o "$REPORT_PATH" || true
          [ -s "$REPORT_PATH" ] || echo "[]" > "$REPORT_PATH"

      - name: Lint summary
        env:
          REPORT_PATH: ${{ github.workspace }}/frontend/reports/eslint-report.json
        run: |
          node -e "const fs=require('fs');let a=[];try{a=JSON.parse(fs.readFileSync(process.env.REPORT_PATH,'utf8'))}catch{};const e=a.reduce((s,f)=>s+f.errorCount,0);const w=a.reduce((s,f)=>s+f.warningCount,0);const fct=a.length;console.log(`ESLint completed · files: ${fct}, errors: ${e}, warnings: ${w}`);"

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report-frontend
          path: frontend/reports/eslint-report.json

  unit-test:
    name: Run Frontend Unit Tests
    needs: [setup, lint]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - run: npm test -- --watchAll=false

  codeql:
    name: Security Analysis with CodeQL
    needs: unit-test
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v3
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - uses: github/codeql-action/analyze@v3

  dockerize:
    name: Docker Build Frontend
    needs: [unit-test, codeql]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: docker build -t role-frontend ./frontend

  deploy:
    name: Deploy to GCP Frontend VM
    needs: dockerize
    runs-on: ubuntu-latest
    steps:
      - name: SSH to GCP and deploy frontend
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.FRONTEND_VM_IP }}
          username: ${{ secrets.FRONTEND_VM_USER }}
          key: ${{ secrets.FRONTEND_VM_SSH_KEY }}
          script: |
            cd ~/role-management-frontend
            git pull origin main
            docker stop role-frontend || true
            docker rm role-frontend || true
            docker build -t role-frontend ./frontend
            docker run -d --name role-frontend -p 80:80 role-frontend
